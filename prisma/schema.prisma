// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  email        String   @unique
  password     String
  name         String
  noTlp        String?
  tanggalLahir DateTime
  jenisKelamin Gender
  role         Role     @default(CUSTOMER)
  referralCode String   @unique //nanti baut fungsi generate refferalcode
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  events            Event[] // organizer's created events
  transactions      Transaction[]
  reviews           Review[]
  referralsGiven    Referral[]    @relation("Referrer") //yang beri
  referralsReceived Referral[]    @relation("Referred") //yang terima
  points            Point[]
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum Gender {
  MALE
  FEMALE
}

model Event {
  id              String        @id @default(uuid())
  name            String
  description     String?
  syaratKetentuan String?
  category        EventCategory
  eventTags       EventTag[]
  startDate       DateTime
  endDate         DateTime
  location        String
  statusEvent     EventStatus
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  organizer   User   @relation(fields: [organizerId], references: [id])
  organizerId String

  transactions Transaction[]
  vouchers     Voucher[]
  reviews      Review[]
  ticketTypes  TicketType[]

  @@index([category, startDate])
  @@index([organizerId])
}

enum EventStatus {
  PUBLISHED
  DRAFT
  PAST
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  eventTags EventTag[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model EventTag {
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([eventId, tagId])
}

enum EventCategory {
  CONFERENCE
  WORKSHOP
  SEMINAR
  BOOTCAMP
  COMPETITION
  FESTIVAL
  MUSIC
  SPORTS
  TECH
  ART
  EDUCATION
  CHARITY
  LAINNYA
}

model TicketType {
  id          String   @id @default(uuid())
  name        String
  price       Int
  quota       Int
  description String?
  benefit     String?
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItem OrderItem[]
}

model OrderItem {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String

  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId String
  quantity     Int
  subTotal     Int
}

model Transaction {
  id           String            @id @default(uuid())
  user         User              @relation(fields: [customerId], references: [id])
  customerId   String
  event        Event             @relation(fields: [eventId], references: [id])
  eventId      String
  status       TransactionStatus
  paymentProof String?
  totalPrice   Int
  expiredAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  orderItems OrderItem[]
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Voucher {
  id        String        @id @default(uuid())
  code      String        @unique
  discount  Int
  status    VoucherStatus @default(ACTIVE)
  startDate DateTime
  endDate   DateTime

  event   Event  @relation(fields: [eventId], references: [id])
  eventId String
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

model Referral {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  referrer   User   @relation("Referrer", fields: [referrerId], references: [id])
  referrerId String

  referred   User   @relation("Referred", fields: [referredId], references: [id])
  referredId String @unique

  coupon Coupon?
}

model Coupon {
  id         String    @id @default(uuid())
  discount   Int
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  referral   Referral  @relation(fields: [referralId], references: [id])
  referralId String    @unique
  useAt      DateTime?
}

model Point {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  isUsed    Boolean  @default(false)
  amount    Int //point per entry
  expiresAt DateTime //epired 3 month
  createdAt DateTime @default(now())
}

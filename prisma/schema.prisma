generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  name              String
  password          String
  role              Role          @default(CUSTOMER)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  profileImage      String?
  referralCode      String        @unique
  username          String        @unique
  noTlp             String?
  isVerified        Boolean       @default(false)
  brithDate         DateTime
  gender            Gender
  events            Event[]
  points            Point[]
  referralsReceived Referral?     @relation("Referred")
  referralsGiven    Referral[]    @relation("Referrer")
  reviews           Review[]
  transactions      Transaction[]
}

model Event {
  id              String        @id @default(uuid())
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime      @default(now())
  organizerId     String
  location        String
  updatedAt       DateTime      @updatedAt
  statusEvent     EventStatus
  syaratKetentuan String?
  category        EventCategory
  organizer       User          @relation(fields: [organizerId], references: [id])
  eventTags       EventTag[]
  reviews         Review[]
  ticketTypes     TicketType[]
  transactions    Transaction[]
  vouchers        Voucher[]

  @@index([category, startDate])
  @@index([organizerId])
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  eventTags EventTag[]
}

model EventTag {
  eventId   String
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([eventId, tagId])
}

model TicketType {
  id          String      @id @default(uuid())
  name        String
  price       Int
  quota       Int
  description String?
  benefit     String?
  eventId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItem   OrderItem[]
  event       Event       @relation(fields: [eventId], references: [id])
}

model OrderItem {
  id            String      @id @default(uuid())
  transactionId String
  ticketTypeId  String
  quantity      Int
  subTotal      Int
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id           String            @id @default(uuid())
  eventId      String
  totalPrice   Int
  status       TransactionStatus
  paymentProof String?
  createdAt    DateTime          @default(now())
  expiredAt    DateTime?
  updatedAt    DateTime          @updatedAt
  customerId   String
  orderItems   OrderItem[]
  user         User              @relation(fields: [customerId], references: [id])
  event        Event             @relation(fields: [eventId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  eventId   String
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Voucher {
  id        String        @id @default(uuid())
  code      String        @unique
  discount  Int
  startDate DateTime
  endDate   DateTime
  eventId   String
  status    VoucherStatus @default(ACTIVE)
  event     Event         @relation(fields: [eventId], references: [id])
}

model Referral {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  referrerId String
  referredId String   @unique
  coupon     Coupon?
  referred   User     @relation("Referred", fields: [referredId], references: [id])
  referrer   User     @relation("Referrer", fields: [referrerId], references: [id])
}

model Coupon {
  id         String    @id @default(uuid())
  discount   Int
  expiresAt  DateTime
  referralId String    @unique
  isUsed     Boolean   @default(false)
  useAt      DateTime?
  referral   Referral  @relation(fields: [referralId], references: [id])
}

model Point {
  id        String   @id @default(uuid())
  userId    String
  amount    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  CUSTOMER
  ORGANIZER
}

enum Gender {
  MALE
  FEMALE
}

enum EventStatus {
  PUBLISHED
  DRAFT
  PAST
}

enum EventCategory {
  CONFERENCE
  WORKSHOP
  SEMINAR
  BOOTCAMP
  COMPETITION
  FESTIVAL
  MUSIC
  SPORTS
  TECH
  ART
  EDUCATION
  CHARITY
  LAINNYA
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  email             String        @unique
  name              String
  password          String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  profileImage      String?
  referralCode      String        @unique
  username          String        @unique
  noTlp             String?
  isVerified        Boolean       @default(false)
  gender            Gender?
  birthDate         DateTime?
  id                Int           @id @default(autoincrement())
  events            Event[]
  points            Point[]
  referralsReceived Referral?     @relation("Referred")
  referralsGiven    Referral[]    @relation("Referrer")
  reviews           Review[]
  transactions      Transaction[]
  roles             UserRole[]
}

model Role {
  name  RoleName   @unique
  id    Int        @id @default(autoincrement())
  users UserRole[]
}

model UserRole {
  isActive Boolean @default(false)
  roleId   Int
  id       Int     @id @default(autoincrement())
  userId   Int
  role     Role    @relation(fields: [roleId], references: [id])
  user     User    @relation(fields: [userId], references: [id])
}

model Event {
  name            String
  description     String?
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime      @default(now())
  location        String
  updatedAt       DateTime      @updatedAt
  image           String?
  statusEvent     EventStatus
  syaratKetentuan String?
  category        EventCategory
  id              Int           @id @default(autoincrement())
  organizerId     Int
  organizer       User          @relation(fields: [organizerId], references: [id])
  eventTags       EventTag[]
  reviews         Review[]
  ticketTypes     TicketType[]
  transactions    Transaction[]
  vouchers        Voucher[]

  @@index([category, startDate])
  @@index([organizerId])
}

model Tag {
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  id        Int        @id @default(autoincrement())
  eventTags EventTag[]
}

model EventTag {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   Int
  tagId     Int
  event     Event    @relation(fields: [eventId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([eventId, tagId])
}

model TicketType {
  name        String
  price       Int
  quota       Int
  description String?
  benefit     String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  id          Int         @id @default(autoincrement())
  eventId     Int
  orderItem   OrderItem[]
  event       Event       @relation(fields: [eventId], references: [id])
}

model OrderItem {
  quantity      Int
  subTotal      Int
  id            Int         @id @default(autoincrement())
  transactionId Int
  ticketTypeId  Int
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id])
  transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model Transaction {
  totalPrice   Int
  status       TransactionStatus
  paymentProof String?
  createdAt    DateTime          @default(now())
  expiredAt    DateTime?
  updatedAt    DateTime          @updatedAt
  id           Int               @id @default(autoincrement())
  eventId      Int
  customerId   Int
  orderItems   OrderItem[]
  user         User              @relation(fields: [customerId], references: [id])
  event        Event             @relation(fields: [eventId], references: [id])
}

model Review {
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  eventId   Int
  userId    Int
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Voucher {
  code      String        @unique
  discount  Int
  startDate DateTime
  endDate   DateTime
  status    VoucherStatus @default(ACTIVE)
  id        Int           @id @default(autoincrement())
  eventId   Int
  event     Event         @relation(fields: [eventId], references: [id])
}

model Referral {
  createdAt  DateTime @default(now())
  id         Int      @id @default(autoincrement())
  referrerId Int
  referredId Int      @unique
  coupon     Coupon?
  referred   User     @relation("Referred", fields: [referredId], references: [id])
  referrer   User     @relation("Referrer", fields: [referrerId], references: [id])
}

model Coupon {
  discount   Int
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  useAt      DateTime?
  id         Int       @id @default(autoincrement())
  referralId Int       @unique
  referral   Referral  @relation(fields: [referralId], references: [id])
}

model Point {
  amount    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

enum Gender {
  MALE
  FEMALE
}

enum RoleName {
  CUSTOMER
  ORGANIZER
}

enum EventStatus {
  PUBLISHED
  DRAFT
  PAST
}

enum EventCategory {
  CONFERENCE
  WORKSHOP
  SEMINAR
  BOOTCAMP
  COMPETITION
  FESTIVAL
  MUSIC
  SPORTS
  TECH
  ART
  EDUCATION
  CHARITY
  LAINNYA
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

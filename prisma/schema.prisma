generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum RoleName {
  CUSTOMER
  ORGANIZER
}

enum Gender {
  MALE
  FEMALE
}

enum EventStatus {
  PUBLISHED
  DRAFT
  PAST
}

enum EventCategory {
  CONFERENCE
  WORKSHOP
  SEMINAR
  BOOTCAMP
  COMPETITION
  FESTIVAL
  MUSIC
  SPORTS
  TECH
  ART
  EDUCATION
  CHARITY
  LAINNYA
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum VoucherStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

model User {
  id           Int        @id @default(autoincrement())
  username     String     @unique
  email        String     @unique
  password     String
  name         String
  noTlp        String?
  birthDate    DateTime?
  gender       Gender?
  roles        UserRole[]
  referralCode String     @unique
  isVerified   Boolean    @default(false)
  profileImage String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  events            Event[]
  transactions      Transaction[]
  reviews           Review[]
  referralsGiven    Referral[]    @relation("Referrer") //sdh
  referralsReceived Referral[]    @relation("Referred") //sdh
  points            Point[] //sdh
}

model Role {
  id    Int        @id @default(autoincrement())
  name  RoleName   @unique
  users UserRole[]
}

model UserRole {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  role     Role    @relation(fields: [roleId], references: [id])
  roleId   Int
  isActive Boolean @default(false)
}

model Event {
  id              Int           @id @default(autoincrement())
  name            String
  description     String?
  syaratKetentuan String?
  category        EventCategory
  eventTags       EventTag[]
  startDate       DateTime
  endDate         DateTime
  location        String
  statusEvent     EventStatus
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  organizer   User @relation(fields: [organizerId], references: [id])
  organizerId Int

  transactions Transaction[]
  vouchers     Voucher[]
  reviews      Review[]
  ticketTypes  TicketType[]

  @@index([category, startDate])
  @@index([organizerId])
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  eventTags EventTag[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model EventTag {
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([eventId, tagId])
}

model TicketType {
  id          Int      @id @default(autoincrement())
  name        String
  price       Int
  quota       Int
  description String?
  benefit     String?
  event       Event    @relation(fields: [eventId], references: [id])
  eventId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  orderItem OrderItem[]
}

model OrderItem {
  id            Int         @id @default(autoincrement())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  ticketType    TicketType  @relation(fields: [ticketTypeId], references: [id])
  ticketTypeId  Int
  quantity      Int
  subTotal      Int
}

model Transaction {
  id           Int               @id @default(autoincrement())
  user         User              @relation(fields: [customerId], references: [id])
  customerId   Int
  event        Event             @relation(fields: [eventId], references: [id])
  eventId      Int
  status       TransactionStatus
  paymentProof String?
  totalPrice   Int
  expiredAt    DateTime?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  orderItems OrderItem[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
}

model Voucher {
  id        Int           @id @default(autoincrement())
  code      String        @unique
  discount  Int
  status    VoucherStatus @default(ACTIVE)
  startDate DateTime
  endDate   DateTime

  event   Event @relation(fields: [eventId], references: [id])
  eventId Int
}

model Referral {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  referrer   User @relation("Referrer", fields: [referrerId], references: [id])
  referrerId Int //memberi

  referred   User @relation("Referred", fields: [referredId], references: [id])
  referredId Int  @unique //menerima

  coupon Coupon?
}

//coupon saat daftar 10%
model Coupon {
  id         Int       @id @default(autoincrement())
  discount   Int
  expiresAt  DateTime
  isUsed     Boolean   @default(false)
  referral   Referral  @relation(fields: [referralId], references: [id])
  referralId Int       @unique
  useAt      DateTime?
}

model Point {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  isUsed    Boolean  @default(false)
  amount    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}
